df[month,8] <- outcome
df[month,7] <- "False"
return(df)
}
ndata <- updatebudget(data,2,40,20)
updatebudget <- function(df, month, fixedexpenses, variableexpenses){
df[month,4] <- fixedexpenses
df[month,5] <- variableexpenses
total = fixedexpenses + variableexpenses
df[month,6] <- total
net = df[month,2]
expected = df[month,3]
perexpected = expected/100.00
netexpected = net * perexpected
outcome = netexpected - total
df[month,7] <- "false"
df[month,8] <- outcome
return(df)
}
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = 0, "Amount Saved" = 0)
return(df)
}
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = "", "Amount Saved" = 0)
return(df)
}
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = " ", "Amount Saved" = 0)
return(df)
}
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = 0, "Amount Saved" = 0)
return(df)
}
ndata <- updatebudget(data,2,40,20)
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = " ", "Amount Saved" = 0)
return(df)
}
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = 0, "Amount Saved" = 0)
return(df)
}
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,40,20)
createbudget <- function(netincome, savingpercent){
df = data.frame("Month" = 1:12, "Net Income" = netincome, "Expected Savings Percentage" = savingpercent,
"Fixed Expenditures" = 0, "Variable Expenditures" = 0, "Total Expenditures" = 0,
"Goal Reached" = 0, "Amount Saved" = 0, "Amount Left" = 0)
return(df)
}
updatebudget <- function(df, month, fixedexpenses, variableexpenses){
df[month,4] <- fixedexpenses
df[month,5] <- variableexpenses
total = fixedexpenses + variableexpenses
df[month,6] <- total
net = df[month,2]
expected = df[month,3]
perexpected = expected/100.00
savewant = net * perexpected
truenet = net - savewant
result = truenet - total
regeresult = net - total
if(result >= savewant){
df[month,7] <- "Yes"
}else{df[month,7] <- "No"}
df[month,8] <- result
df[month,9] <- regeresult
return(df)
}
ndata <- updatebudget(data,2,40,20)
ndata <- updatebudget(data,2,1100,100)
View(ndata)
data <- createbudget(1500,16)
ndata <- updatebudget(data,2,1100,100)
View(ndata)
viewbudget <- function(df, month, type = "pie"){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for Mont: ", month)
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
}
viewbudget(ndata,2)
viewbudget <- function(df, month, type = "pie"){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
}
viewbudget(ndata,2)
viewbudget <- function(df, month = 1 , type = "pie"){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
counts <- table(df[2], df[6], df[8])
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata,2)
viewbudget(ndata,2, pie)
viewbudget(ndata,2, "pie")
viewbudget(ndata,2, "pie")
viewbudget(ndata,2, "pie")
viewbudget <- function(df, month = 1 , type = "pie"){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
plot <- pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
counts <- table(df[2], df[6], df[8])
plot <- barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
return(plot)
}
viewbudget(ndata,2, "pie")
viewbudget(ndata,2, "pie")
viewbudget <- function(df, month = 1 , type = "pie"){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
budgetplot <- pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
counts <- table(df[2], df[6], df[8])
budgetplot <- barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
return(budgetplot)
}
viewbudget(ndata,2, "pie")
viewbudget <- function(df, month = 1 , type = "pie"){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
counts <- table(df[2], df[6], df[8])
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata,2, "pie")
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
counts <- table(df[2], df[6], df[8])
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata,"pie", 2)
viewbudget(ndata,"pie", 1)
viewbudget(ndata,"pie", 2)
viewbudget(ndata, "bar")
viewbudget(ndata, "bar",2)
viewbudget(ndata, "bar")
counts <- table(ndata[2], ndata[6], ndata[8])
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
counts
counts <- table(ndata[2])
counts
ndata[2]
barplot(counts)
barplot?
?barplot
plot(ndata[,2])
plot(ndata[2,])
ndata[2,]
barplot(ndata[,2])
counts <- table(ndata[,2], ndata[,6], ndata[,8])
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
counts <- table(ndata[,2], ndata[,6], ndata[,8])
counts
counts <- matrix(ndata[,2], ndata[,6], ndata[,8])
counts <- matrix(3:12)
counts
counts <- matrix(1:12, nrow = 3, byrow = TRUE)
counts
counts <- matrix(1:12, nrow = 12, byrow = TRUE)
counts
counts <- matrix(1:36, nrow = 12, byrow = TRUE)
counts
counts <- matrix(c(ndata[,2], ndata[,6], ndata[,8]), nrow = 12, byrow = TRUE)
counts
counts <- c(c(df[,2]), c(df[,6]), c(df[,8]))
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
net <- c(df[,2])
expence <- c(df[,6])
savings <- c(df[,8])
counts <- c(net,expence, savings)
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata, "bar")
counts <- c(net,expence, savings)
counts <- table(net,expence,savings)
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
net <- c(df[,2])
expence <- c(df[,6])
savings <- c(df[,8])
counts <- table(net,expence,savings)
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata, "bar")
counts <- matrix(net,expence,savings)
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
net <- c(df[,2])
expence <- c(df[,6])
savings <- c(df[,8])
counts <- matrix(net,expence,savings)
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata, "bar")
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
net <- c(df[,2])
counts <- c(net)
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata, "bar")
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
net <- table(df[,2])
counts <- c(net)
barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
}
}
viewbudget(ndata, "bar")
table(ndata[,2]
table(ndata[,2])
table(ndata[,2])
table(ndata[,2],ndata[,6],ndata[,8])
ndata <- updatebudget(ndata,3,900,50)
View(ndata)
table(ndata[2:3,2],ndata[2:3,6],ndata[2:3,8])
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
xyz <- as.matrix(df[,c(2,6,8)])
## barplot(counts, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
# legend = rownames(counts), beside = TRUE)
return(xyz)
}
}
viewbudget(ndata, "bar")
viewbudget <- function(df, type = "pie", month = 1){
if(type == "pie"){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title)
}
if(type == "bar"){
xyz <- as.matrix(df[,c(2,6,8)])
barplot(xyz, main = "Budget Breakdown for the Year", xlab = "Months", col = c("blue", "red", "yellow"),
legend = rownames(counts), beside = TRUE)
return(xyz)
}
}
viewbudget(ndata, "bar")
source('C:/Users/Torrancew/Desktop/budgetly/R/viewbudget.R', echo=TRUE)
viewbudget(ndata, 2)
comparebudget <- function(df, month1, month2){
print(paste("Your income for month ", month1, "was", df[month1,1], "\n"))
print(paste("Your income for month ", month2, "was", df[month2,1], "\n"))
}
comparebudget(ndata,2,3)
comparebudget <- function(df, month1, month2){
print(paste("Your income for month ", month1, "was", df[month1,2], " \n"))
print(paste("Your income for month ", month2, "was", df[month2,2], " \n"))
}
comparebudget(ndata,2,3)
comparebudget <- function(df, month1, month2){
print(paste("Your income for month ", month1, "was", df[month1,2]))
print("")
print(paste("Your income for month ", month2, "was", df[month2,2]))
print("")
print("")
if(df[month1,8] > df[month2,8]){
print(paste("You saved more money in month", month1))
}
if(df[month2,8] > df[month1,8]){
print(paste("You saved more money in month", month2))
}
if(df[month2,8] == df[month1,8]){
print(paste("You saved the same amount in", month1, "as ", month2))
}
print("")
}
comparebudget(ndata,2,3)
comparebudget <- function(df, month1, month2){
print(paste("Your income for month ", month1, "was", df[month1,2]))
print(paste("Your income for month ", month2, "was", df[month2,2]))
if(df[month1,8] > df[month2,8]){
print(paste("You saved more money in month", month1))
}
if(df[month2,8] > df[month1,8]){
print(paste("You saved more money in month", month2))
}
if(df[month2,8] == df[month1,8]){
print(paste("You saved the same amount in", month1, "as ", month2))
}
}
comparebudget(ndata,2,3)
table(ndata[2],ndata[3])
table(ndata[,2],ndata[,3])
ndata[2,]
table(ndata[2,],ndata[3,])
ndata[2:3,]
View(ndata[2:3,])
comparebudget <- function(df, month1, month2, sidebyside = "NO"){
if(sidebyside == "NO"){
print(paste("Your income for month ", month1, "was", df[month1,2]))
print(paste("Your income for month ", month2, "was", df[month2,2]))
if(df[month1,8] > df[month2,8]){
print(paste("You saved more money in month", month1))
}
if(df[month2,8] > df[month1,8]){
print(paste("You saved more money in month", month2))
}
if(df[month2,8] == df[month1,8]){
print(paste("You saved the same amount in", month1, "as ", month2))
}
}
if(sidebyside == "YES"){
View(df[month1:month2,])
}
}
comparebudget(ndata,2,3)
comparebudget(ndata,2,3,"YES")
comparebudget <- function(df, month1, month2, sidebyside = "NO"){
if(sidebyside == "NO"){
print(paste("Your income for month ", month1, "was", df[month1,2]))
print(paste("Your income for month ", month2, "was", df[month2,2]))
if(df[month1,8] > df[month2,8]){
print(paste("You saved more money in month", month1))
}
if(df[month2,8] > df[month1,8]){
print(paste("You saved more money in month", month2))
}
if(df[month2,8] == df[month1,8]){
print(paste("You saved the same amount in", month1, "as ", month2))
}
}
if(sidebyside == "YES"){
x <- data.frame(df[month1:month2,])
return(x)
}
}
com <- comparebudget(ndata,2,3,"YES")
View(com)
viewbudget <- function(df, month = 1){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title, col = c("red", "darkblue", "yellow"))
}
viewbudget(ndata, 2)
viewbudget <- function(df, month = 1){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title, col = c("lightpink1", "lightskyblue", "plum2"))
}
viewbudget(ndata, 2)
viewbudget <- function(df, month = 1){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print("Budget Breakdown for the Month")
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title, col = c("lightpink1", "lightskyblue", "plum4"))
}
viewbudget(ndata, 2)
viewbudget <- function(df, month = 1){
pieces = c(df[month,2], df[month,6], df[month,8])
title <- print(paste("Budget Breakdown for the Month", month))
labs <- c("Net Income", "Expenditures" , "Savings")
pie(pieces, labels = labs, main = title, col = c("lightpink1", "lightskyblue", "plum4"))
}
install.packages("devtools")
library(devtools)
library("devtools")
devtools::install_github("klutometis/roxygen")
install.packages("roxygen2")
install.packages("backports")
install.packages("backports")
setwd("./budgetly")
getwd
getwd()
document()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
library(devtools)
install_github("devtools", "hadley")
library(budgetly)
load_all()
install.packages(c("BH", "bit", "blob", "boot", "caret", "chron", "data.table", "DBI", "dplyr", "fansi", "farver", "foreach", "isoband", "lattice", "lava", "lifecycle", "lme4", "lubridate", "mime", "ModelMetrics", "pillar", "pkgbuild", "prettyunits", "recipes", "reshape2", "reticulate", "rex", "rmarkdown", "RSQLite", "SQUAREM", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("BH", "bit", "blob", "boot", "caret", "chron", "data.table", "DBI", "dplyr", "fansi", "farver", "foreach", "isoband", "lattice", "lava", "lifecycle", "lme4", "lubridate", "mime", "ModelMetrics", "pillar", "pkgbuild", "prettyunits", "recipes", "reshape2", "reticulate", "rex", "rmarkdown", "RSQLite", "SQUAREM", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("BH", "bit", "blob", "boot", "caret", "chron", "data.table", "DBI", "dplyr", "fansi", "farver", "foreach", "isoband", "lattice", "lava", "lifecycle", "lme4", "lubridate", "mime", "ModelMetrics", "pillar", "pkgbuild", "prettyunits", "recipes", "reshape2", "reticulate", "rex", "rmarkdown", "RSQLite", "SQUAREM", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("BH", "bit", "blob", "boot", "caret", "chron", "data.table", "DBI", "dplyr", "fansi", "farver", "foreach", "isoband", "lattice", "lava", "lifecycle", "lme4", "lubridate", "mime", "ModelMetrics", "pillar", "pkgbuild", "prettyunits", "recipes", "reshape2", "reticulate", "rex", "rmarkdown", "RSQLite", "SQUAREM", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages("installr")
install.packages("installr")
updateR()
library(installr)
updateR()
updateR()
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
quit()
install.packages("devtools")
install.packages("rtools")
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
find.package("devtools")
install.packages("devtools")
install.packages(c("devtools", "roxygen2"))
library(roxygen2)
library(devtools)
quit()
